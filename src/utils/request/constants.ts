export const ServerDomain: Record<ServerType, IDomainEnv> = {
  OLA: {
    dev: 'https://ola-dev.xiongmaoboshi.com',
    pre: 'https://ola-pre.xiongmaoboshi.com',
    prod: 'https://ola.xiongmaoboshi.com',
  },
  UIS: {
    dev: 'https://staging-subs.xiongmaoboshi.com',
    pre: 'https://subs-pre.xiongmaoboshi.com',
    prod: 'https://subs.xiongmaoboshi.com',
  },
  FCCA: {
    dev: 'https://fc.xiongmaoboshi.com/h5/dev',
    pre: 'https://fc.xiongmaoboshi.com/h5/pre',
    prod: 'https://fc.xiongmaoboshi.com/h5',
  },
}

export type HttpMethod = 'GET' | 'POST'

export type ServerType = 'OLA' | 'UIS' | 'FCCA'

/** ÊúçÂä°Âô®ÁéØÂ¢ÉÂüüÂêçÂå∫ÂàÜ */
export interface IDomainEnv {
  dev: string
  pre: string
  prod: string
}

export const DefaultHeaders = {
  credentials: 'include',
  mode: 'no-cors',
}

export enum PostType {
  JSON = 'application/json;charset=utf-8;',
  FROM = 'application/x-www-form-urlencoded;charset=utf-8;',
  FROM_DATA = 'multipart/formdata',
}

export interface IRequest<T = any> {
  /** requestÊú¨Ë∫´‰ºöÊ†πÊçÆpathÂåπÈÖçÂüüÂêç Êèê‰æõÁâπÊÆäÊÉÖÂÜµËµ∞ÊåáÂÆöÊúçÂä°ÁöÑÊÉÖÂÜµ */
  baseUrl?: string
  /** Êé•Âè£Ë∑ØÂæÑ */
  path?: string
  /** ‰∏çÈúÄË¶ÅÈâ¥ÊùÉÁöÑÊé•Âè£ÈÖçÁΩÆ ÂèØ‰ª•Âú®requestIntercepterÂ§ÑÁêÜ‰∏Ä‰∫õÁâπÊÆäÁöÑheader Êúâ‰∫õÊé•Âè£Á©ø‰∫ÜÂ§ö‰ΩôÁöÑheaderÊúçÂä°Âô®‰ºöÊä•ÈîôüòÖüòÖüòÖ */
  noAuth?: boolean
  /** header config */
  headers?: any
  /** ËØ∑Ê±ÇÊñπÂºè */
  method?: HttpMethod
  /** postËØ∑Ê±ÇÂèÇÊï∞ */
  body?: T // Object | string | File | Stream
  /** getËØ∑Ê±ÇÂèÇÊï∞ */
  query?: T
  /** ËØ∑Ê±ÇÊã¶Êà™ */
  requestIntercepter?: (config: IRequest) => IRequest
  /** ÈîôËØØÂ§ÑÁêÜ */
  failHandler?: (error: ErrorEventType) => void
  /** ÊàêÂäüÂ§ÑÁêÜ */
  successHandler?: (success: IHttpResponse) => void
}

export interface IHttpResponse<T = any> {
  ok: boolean
  data: Partial<IResponse<T>>
  status: number
  statusText: string
  headers: any
  url?: string
}

export interface IResponse<T = any> {
  code: number
  data: T
  message: string
}

export interface ErrorEventType extends Partial<IResponse> {
  status?: number
  url?: string
}
